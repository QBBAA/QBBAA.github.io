// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.15/esri/copyright.txt for details.
//>>built
define("require exports ../../../../geometry ../../../../core/mathUtils ../../../../core/maybe ../../../../core/screenUtils ../../../../core/libs/gl-matrix-2/vec3 ../../../../core/libs/gl-matrix-2/vec3f64 ../../../../layers/graphics/dehydratedFeatures ../../../../support/elevationInfoUtils ../../support/geometryUtils ../../support/projectionUtils ../../support/geometryUtils/plane ../../support/geometryUtils/ray".split(" "),function(A,e,v,w,x,p,d,l,y,m,z,h,q,t){function n(b,a,c){return function(g,
d){g=b.sceneIntersectionHelper.intersectElevationFromScreen(p.createScreenPointArray(g.x,g.y),a,c);return x.isSome(g)&&h.pointToPoint(g,g,d)?g:null}}function k(b){return function(a,c){return(a=b.toMap(a))&&h.pointToPoint(a,a,c)?a:null}}Object.defineProperty(e,"__esModule",{value:!0});e.createForGraphic=function(b,a,c){var d=m.getGraphicEffectiveElevationInfo(a);switch(d.mode){case "on-the-ground":return k(b);case "absolute-height":case "relative-to-ground":case "relative-to-scene":return a=b.toMap(c,
{include:[a]}),n(b,d,a.z);default:return null}};e.createForGraphicAtLocation=function(b,a,c){a=m.getGraphicEffectiveElevationInfo(a);h.pointToPoint(c,u,b.spatialReference);switch(a.mode){case "on-the-ground":return k(b);case "absolute-height":case "relative-to-ground":case "relative-to-scene":return n(b,a,u.z);default:return null}};e.createScreenToElevationSurface=n;e.createOnTheGround=k;e.createCameraAlignedWorldUp=function(b,a){var c=l.vec3f64.create();if(!b.renderCoordsHelper.toRenderCoords(a,
c))return null;var g=d.vec3.length(c),e=l.vec3f64.create();b.renderCoordsHelper.worldUpAtPosition(c,e);var h=q.create(),n=p.createScreenPointArray(),f=l.vec3f64.create(),k=t.create();return function(a,l){var m=b.state.camera,r=d.vec3.cross(h,e,d.vec3.subtract(f,c,m.eye));d.vec3.cross(r,r,e);q.fromPositionAndNormal(c,r,h);t.fromScreenAtEye(m,p.screenPointObjectToArray(a,n),k);if(!q.intersectRay(h,k,f))return null;d.vec3.subtract(f,f,c);z.vector.projectPoint(e,f,f);"global"===b.viewingMode&&d.vec3.length(f)*
w.sign(d.vec3.dot(e,f))<-g+.001&&d.vec3.subtract(f,d.vec3.scale(f,e,.001),c);d.vec3.add(f,f,c);return b.renderCoordsHelper.fromRenderCoords(f,new v.Point,l)}};var u=y.makeDehydratedPoint(0,0,null,null)});