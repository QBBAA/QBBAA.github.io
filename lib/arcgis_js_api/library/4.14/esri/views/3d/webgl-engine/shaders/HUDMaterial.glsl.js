// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.15/esri/copyright.txt for details.
//>>built
define("require exports ../../../../core/tsSupport/makeTemplateObjectHelper ../../../../core/libs/gl-matrix-2/vec2 ../../../../core/libs/gl-matrix-2/vec2f64 ../core/shaderLibrary/Slice.glsl ../core/shaderLibrary/hud/AlignPixel.glsl ../core/shaderLibrary/hud/HUD.glsl ../core/shaderLibrary/hud/HUDOcclusionPass.glsl ../core/shaderLibrary/output/OutputHighlight.glsl ../core/shaderLibrary/shading/VisualVariables.glsl ../core/shaderLibrary/util/ColorConversion.glsl ../core/shaderLibrary/util/RgbaFloatEncoding.glsl ../core/shaderLibrary/util/ScreenSizePerspective.glsl ../core/shaderModules/interfaces ../core/shaderModules/ShaderBuilder".split(" "),
function(O,e,c,A,B,C,D,E,F,G,H,I,J,K,d,L){function g(a,b){void 0===b&&(b=M);if(a.textureIsSignedDistanceField){var c=a.anchorPos;a=a.distanceFieldBoundingBox;var d=b;d[0]=c[0]*(a[2]-a[0])+a[0];d[1]=c[1]*(a[3]-a[1])+a[1]}else A.vec2.copy(b,a.anchorPos);return b}Object.defineProperty(e,"__esModule",{value:!0});e.build=function(a){var b=new L.ShaderBuilder;b.include(D.AlignPixel);b.include(E.HUD,a);b.include(C.Slice,a);if(6===a.output)return b.include(F.HUDOcclusionPass,a),b;b.include(K.ScreenSizePerspective);
b.include(J.RgbaFloatEncoding);b.include(I.ColorConversion,{stages:1});b.include(H.VisualVariables,a);b.varyings.add("vcolor","vec4");b.varyings.add("vtc","vec2");b.varyings.add("vsize","vec2");a.binaryHighlightOcclusionEnabled&&b.varyings.add("voccluded","float");b.vertex.uniforms.add("screenOffset","vec2").add("anchorPos","vec2").add("textureCoordinateScaleFactor","vec2");a.screenSizePerspectiveEnabled&&b.vertex.uniforms.add("screenSizePerspective","vec4");(a.debugDrawBorder||a.binaryHighlightOcclusionEnabled)&&
b.varyings.add("debugBorderCoords","vec4");b.attributes.add("uv0","vec2");b.attributes.add("color","vec4");b.attributes.add("size","vec2");b.attributes.add("auxpos2","vec4");b.vertex.code.add(d.glsl(h||(h=c(["\n    void main(void) {\n      ProjectHUDAux projectAux;\n      vec4 posProj \x3d projectPositionHUD(projectAux);\n\n      if (rejectBySlice(projectAux.posModel)) {\n        // Project outside of clip plane\n        gl_Position \x3d vec4(1e038, 1e038, 1e038, 1.0);\n        return;\n      }\n      vec2 inputSize;\n      ",
"\n\n      ","\n\n      vec2 combinedSize \x3d inputSize * pixelRatio;\n      vec4 quadOffset \x3d vec4(0.0);\n\n      ","\n\n      ","\n    "],["\n    void main(void) {\n      ProjectHUDAux projectAux;\n      vec4 posProj \x3d projectPositionHUD(projectAux);\n\n      if (rejectBySlice(projectAux.posModel)) {\n        // Project outside of clip plane\n        gl_Position \x3d vec4(1e038, 1e038, 1e038, 1.0);\n        return;\n      }\n      vec2 inputSize;\n      ","\n\n      ","\n\n      vec2 combinedSize \x3d inputSize * pixelRatio;\n      vec4 quadOffset \x3d vec4(0.0);\n\n      ",
"\n\n      ","\n    "])),a.screenSizePerspectiveEnabled?d.glsl(k||(k=c(["\n      inputSize \x3d screenSizePerspectiveScaleVec2(size, projectAux.absCosAngle, projectAux.distanceToCamera, screenSizePerspective);\n      vec2 screenOffsetScaled \x3d screenSizePerspectiveScaleVec2(screenOffset, projectAux.absCosAngle, projectAux.distanceToCamera, screenSizePerspectiveAlignment);\n         "],["\n      inputSize \x3d screenSizePerspectiveScaleVec2(size, projectAux.absCosAngle, projectAux.distanceToCamera, screenSizePerspective);\n      vec2 screenOffsetScaled \x3d screenSizePerspectiveScaleVec2(screenOffset, projectAux.absCosAngle, projectAux.distanceToCamera, screenSizePerspectiveAlignment);\n         "]))):
d.glsl(l||(l=c(["\n      inputSize \x3d size;\n      vec2 screenOffsetScaled \x3d screenOffset;"],["\n      inputSize \x3d size;\n      vec2 screenOffsetScaled \x3d screenOffset;"]))),a.vvSize?"inputSize *\x3d vvScale(auxpos2).xx;":"",a.occlusionTestEnabled||a.binaryHighlightOcclusionEnabled?"bool visible \x3d testVisibilityHUD(posProj);":"",a.binaryHighlightOcclusionEnabled?"voccluded \x3d visible ? 0.0 : 1.0;":""));var f=d.glsl(m||(m=c(["\n      vec2 uv01 \x3d floor(uv0);\n      vec2 uv \x3d uv0 - uv01;\n      quadOffset.xy \x3d ((uv01 - anchorPos) * 2.0 * combinedSize + screenOffsetScaled) / viewport.zw * posProj.w;\n  "],
["\n      vec2 uv01 \x3d floor(uv0);\n      vec2 uv \x3d uv0 - uv01;\n      quadOffset.xy \x3d ((uv01 - anchorPos) * 2.0 * combinedSize + screenOffsetScaled) / viewport.zw * posProj.w;\n  "]))),N=a.signedDistanceFieldEnabled?d.glsl(n||(n=c(["\n  posProj \x3d alignToPixelOrigin(posProj, viewport.zw) + quadOffset;"],["\n  posProj \x3d alignToPixelOrigin(posProj, viewport.zw) + quadOffset;"]))):d.glsl(p||(p=c(["\n  posProj +\x3d quadOffset;\n  if (inputSize.x \x3d\x3d size.x) {\n    posProj \x3d alignToPixelOrigin(posProj, viewport.zw);\n  }"],
["\n  posProj +\x3d quadOffset;\n  if (inputSize.x \x3d\x3d size.x) {\n    posProj \x3d alignToPixelOrigin(posProj, viewport.zw);\n  }"])));b.vertex.code.add(d.glsl(q||(q=c("\n      ,\n      ,\n      ,\n      gl_Position \x3d posProj;\n      vtc \x3d uv * textureCoordinateScaleFactor;\n\n      ,\n      vsize \x3d inputSize;\n      ,\n      gl_Position \x3d posProj;\n      ,\n    }\n    ".split(","),"\n      ,\n      ,\n      ,\n      gl_Position \x3d posProj;\n      vtc \x3d uv * textureCoordinateScaleFactor;\n\n      ,\n      vsize \x3d inputSize;\n      ,\n      gl_Position \x3d posProj;\n      ,\n    }\n    ".split(","))),
a.occlusionTestEnabled?"if (visible) {":"",f,N,a.debugDrawBorder?"debugBorderCoords \x3d vec4(uv01, 1.5 / combinedSize);":"",a.occlusionTestEnabled?d.glsl(r||(r=c(["} else { vtc \x3d vec2(0.0);\n        ",""],["} else { vtc \x3d vec2(0.0);\n        ",""])),a.debugDrawBorder?"debugBorderCoords \x3d vec4(0.5, 0.5, 1.5 / combinedSize);}":"}"):"",a.vvColor?"vcolor \x3d vvGetColor(auxpos2, vvColorValues, vvColorColors);":"vcolor \x3d color / 255.0;"));b.fragment.uniforms.add("tex","sampler2D");b.fragment.uniforms.add("overrideColor",
"vec4");b.fragment.uniforms.add("outlineColor","vec4");b.fragment.uniforms.add("outlineSize","float");f=d.glsl(t||(t=c(["\n    ","\n\n    "," \n      if (gl_FragColor.a \x3c 0.1) {\n        discard;\n      }\n  "],["\n    ","\n\n    "," \n      if (gl_FragColor.a \x3c 0.1) {\n        discard;\n      }\n  "])),a.signedDistanceFieldEnabled?d.glsl(u||(u=c(["\n      vec4 color \x3d vec4(0.0, 0.0, 0.0, 0.0);\n      vec4 fillPixelColor \x3d overrideColor * vcolor;\n      \n      // Attempt to sample texel centers to avoid that thin cross outlines\n      // disappear with large symbol sizes.\n      // see: https://devtopia.esri.com/WebGIS/arcgis-js-api/issues/7058#issuecomment-603041\n      const float txSize \x3d 128.0;\n      const float texelSize \x3d 1.0 / txSize;\n      // Calculate how much we have to add/subtract to/from each texel to reach the size of an onscreen pixel\n      vec2 scaleFactor \x3d (vsize - txSize) * texelSize;\n      vec2 samplePos \x3d vtc + (vec2(1.0, -1.0) * texelSize) * scaleFactor;\n\n      // Get distance and map it into [-0.5, 0.5]\n      float d \x3d rgba2float(texture2D(tex, samplePos)) - 0.5;\n\n      // Distance in output units (i.e. pixels)\n      float dist \x3d d * vsize.x;\n\n      // Create smooth transition from the icon into its outline\n      fillPixelColor.a *\x3d clamp(0.5 - dist, 0.0, 1.0);\n\n      if (outlineSize \x3e 0.25) {\n        vec4 outlinePixelColor \x3d outlineColor;\n        float clampedOutlineSize \x3d min(outlineSize, 0.5*vsize.x);\n\n        // Create smooth transition around outline\n        outlinePixelColor.a *\x3d clamp(0.5 - (abs(dist) - 0.5*clampedOutlineSize), 0.0, 1.0);\n\n        // perform un-premultiplied over operator (see https://en.wikipedia.org/wiki/Alpha_compositing#Description)\n        float compositeAlpha \x3d outlinePixelColor.a + fillPixelColor.a * (1.0 - outlinePixelColor.a);\n        vec3 compositeColor \x3d vec3(outlinePixelColor) * outlinePixelColor.a +\n          vec3(fillPixelColor) * fillPixelColor.a * (1.0 - outlinePixelColor.a);\n\n        gl_FragColor \x3d vec4(compositeColor, compositeAlpha);\n      } else {\n        gl_FragColor \x3d premultiplyAlpha(fillPixelColor);\n      }\n      \n      // visualize SDF:\n      // gl_FragColor \x3d vec4(clamp(-dist/vsize.x*2.0, 0.0, 1.0), clamp(dist/vsize.x*2.0, 0.0, 1.0), 0.0, 1.0);\n      "],
["\n      vec4 color \x3d vec4(0.0, 0.0, 0.0, 0.0);\n      vec4 fillPixelColor \x3d overrideColor * vcolor;\n      \n      // Attempt to sample texel centers to avoid that thin cross outlines\n      // disappear with large symbol sizes.\n      // see: https://devtopia.esri.com/WebGIS/arcgis-js-api/issues/7058#issuecomment-603041\n      const float txSize \x3d 128.0;\n      const float texelSize \x3d 1.0 / txSize;\n      // Calculate how much we have to add/subtract to/from each texel to reach the size of an onscreen pixel\n      vec2 scaleFactor \x3d (vsize - txSize) * texelSize;\n      vec2 samplePos \x3d vtc + (vec2(1.0, -1.0) * texelSize) * scaleFactor;\n\n      // Get distance and map it into [-0.5, 0.5]\n      float d \x3d rgba2float(texture2D(tex, samplePos)) - 0.5;\n\n      // Distance in output units (i.e. pixels)\n      float dist \x3d d * vsize.x;\n\n      // Create smooth transition from the icon into its outline\n      fillPixelColor.a *\x3d clamp(0.5 - dist, 0.0, 1.0);\n\n      if (outlineSize \x3e 0.25) {\n        vec4 outlinePixelColor \x3d outlineColor;\n        float clampedOutlineSize \x3d min(outlineSize, 0.5*vsize.x);\n\n        // Create smooth transition around outline\n        outlinePixelColor.a *\x3d clamp(0.5 - (abs(dist) - 0.5*clampedOutlineSize), 0.0, 1.0);\n\n        // perform un-premultiplied over operator (see https://en.wikipedia.org/wiki/Alpha_compositing#Description)\n        float compositeAlpha \x3d outlinePixelColor.a + fillPixelColor.a * (1.0 - outlinePixelColor.a);\n        vec3 compositeColor \x3d vec3(outlinePixelColor) * outlinePixelColor.a +\n          vec3(fillPixelColor) * fillPixelColor.a * (1.0 - outlinePixelColor.a);\n\n        gl_FragColor \x3d vec4(compositeColor, compositeAlpha);\n      } else {\n        gl_FragColor \x3d premultiplyAlpha(fillPixelColor);\n      }\n      \n      // visualize SDF:\n      // gl_FragColor \x3d vec4(clamp(-dist/vsize.x*2.0, 0.0, 1.0), clamp(dist/vsize.x*2.0, 0.0, 1.0), 0.0, 1.0);\n      "]))):
d.glsl(v||(v=c(["gl_FragColor \x3d texture2D(tex, vtc, -0.5) * premultiplyAlpha(overrideColor * vcolor);"],["gl_FragColor \x3d texture2D(tex, vtc, -0.5) * premultiplyAlpha(overrideColor * vcolor);"]))),a.debugDrawBorder?d.glsl(w||(w=c(["\n      float isBorder \x3d float(any(lessThan(debugBorderCoords.xy, debugBorderCoords.zw)) || any(greaterThan(debugBorderCoords.xy, 1.0 - debugBorderCoords.zw)));\n      gl_FragColor \x3d mix(gl_FragColor, vec4(1.0, 0.0, 1.0, 1.0), isBorder);"],["\n      float isBorder \x3d float(any(lessThan(debugBorderCoords.xy, debugBorderCoords.zw)) || any(greaterThan(debugBorderCoords.xy, 1.0 - debugBorderCoords.zw)));\n      gl_FragColor \x3d mix(gl_FragColor, vec4(1.0, 0.0, 1.0, 1.0), isBorder);"]))):
"");0===a.output&&b.fragment.code.add(d.glsl(x||(x=c(["\n    void main() {\n      ","\n    }\n    "],["\n    void main() {\n      ","\n    }\n    "])),f));4===a.output&&(b.include(G.OutputHighlight),b.fragment.code.add(d.glsl(y||(y=c(["\n    void main() {\n      ","\n      ","\n    }\n    "],["\n    void main() {\n      ","\n      ","\n    }\n    "])),f,a.binaryHighlightOcclusionEnabled?d.glsl(z||(z=c(["\n          if (voccluded \x3d\x3d 1.0) {\n            gl_FragColor \x3d vec4(1.0, 1.0, 0.0, 1.0);\n          } else {\n            gl_FragColor \x3d vec4(1.0, 0.0, 1.0, 1.0);\n          }"],
["\n          if (voccluded \x3d\x3d 1.0) {\n            gl_FragColor \x3d vec4(1.0, 1.0, 0.0, 1.0);\n          } else {\n            gl_FragColor \x3d vec4(1.0, 0.0, 1.0, 1.0);\n          }"]))):"outputHighlight();")));return b};(function(a){a.bindUniforms=function(b,a,c){b.setUniform4fv("overrideColor",a.color);a.textureIsSignedDistanceField&&(b.setUniform4fv("outlineColor",a.outlineColor),b.setUniform1f("outlineSize",a.outlineSize));c=c.pixelRatio||1;b.setUniform2f("screenOffset",2*a.screenOffset[0]*
c,2*a.screenOffset[1]*c);b.setUniform2fv("anchorPos",g(a))}})(e.HUDMaterial||(e.HUDMaterial={}));e.calculateAnchorPosForRendering=g;var M=B.vec2f64.create(),k,l,h,m,n,p,r,q,u,v,w,t,x,z,y});